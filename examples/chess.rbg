// Chess
// notes:
// - no rules about repeating states or tie after given number of turns without pawn moves
// - game is limited to 200 turns


#anyRook(color) = color~RookMoved, color~RookUnmoved
#majorPieces(color) = anyRook(color), color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, majorPieces(color)
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)

#players = white (100), black (100)
#pieces = allPieces, empty
#variables = pawnDoubleMove (1), whiteKingMoved (1), blackKingMoved (1), turn (200)


#backLine(color) =
    [color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~King, color~Bishop, color~Knight, color~RookUnmoved]
#pawnLine(color) =
    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
#emptyLine =
    [empty, empty, empty, empty, empty, empty, empty, empty]

#board =
    rectangle(up,down,left,right,
        backLine(black)
        pawnLine(black)
        emptyLine
        emptyLine
        emptyLine
        emptyLine
        pawnLine(white)
        backLine(white)
    )


#anySquare = (left* + right*)(up* + down*)

#anyNeighborSquare =
    (
        left + right + up + down
      + (left + right)(up + down)
    )

#diagonalLine =
    (
        (up left{empty})*up left
      + (up right{empty})*up right
      + (down left{empty})*down left
      + (down right{empty})*down right
    )

#parallelLine =
    (
        (up{empty})* up
      + (down{empty})* down
      + (right{empty})* right
      + (left{empty})* left
    )

#knightHop =
    (
        (up^2 + down^2)(left + right)
      + (left^2 + right^2)(up + down)
    )

#captureAnyBy(capturingPiece; opponentColor) =
    {emptyOrColor(opponentColor)}
    [capturingPiece]

#pickUpPiece(piece) =
    {piece}[empty]

#standardMove(piece; movePattern; opponentColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; opponentColor)

#bishopMove(color; opponentColor) = standardMove(color~Bishop; diagonalLine; opponentColor)
#knightMove(color; opponentColor) = standardMove(color~Knight; knightHop; opponentColor)
#queenMove(color; opponentColor) = standardMove(color~Queen; (diagonalLine + parallelLine); opponentColor)

#rookMove(color; opponentColor) =
    pickUpPiece(anyRook(color))
    parallelLine
    captureAnyBy(color~RookMoved; opponentColor)

#standardKingMove(color; opponentColor) =
    standardMove(color~King; anyNeighborSquare; opponentColor)
    [$ color~KingMoved=1]

#isAttackedByBishop(opponentColor) = diagonalLine{opponentColor~Bishop}
#isAttackedByRook(opponentColor) = parallelLine{anyRook(opponentColor)}
#isAttackedByQueen(opponentColor) = (diagonalLine + parallelLine){opponentColor~Queen}
#isAttackedByKnight(opponentColor) = knightHop{opponentColor~Knight}
#isAttackedByKing(opponentColor) = anyNeighborSquare{opponentColor~King}
#isAttackedByPawn(opponentColor; forwardDirection) =
    (right forwardDirection + left forwardDirection){opponentColor~Pawn}

#isNotAttackedBy(opponentColor; forwardDirection) =
    {!
        isAttackedByBishop(opponentColor)
      + isAttackedByRook(opponentColor)
      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor; forwardDirection)
    }

#checked(color; opponentColor; forwardDirection) =
    anySquare
    {color~King}
    (
        isAttackedByBishop(opponentColor)
      + isAttackedByRook(opponentColor)
      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor; forwardDirection)
    )

#castlingKingMove(forwardDirection; color; opponentColor) =
    {$ color~KingMoved==0}
    pickUpPiece(color~King)
    (
        (right{empty}isNotAttackedBy(opponentColor; forwardDirection))^2
        [color~King]
        right pickUpPiece(color~RookUnmoved)
        left^2
      + (left{empty}isNotAttackedBy(opponentColor; forwardDirection))^2
        [color~King]
        left{empty} // rook CAN pass through attacked square
        left pickUpPiece(color~RookUnmoved)
        right^3
    )
    [color~RookMoved]
    [$ color~KingMoved=1]

#kingMove(forwardDirection; color; opponentColor) =
    (
        castlingKingMove(forwardDirection; color; opponentColor)
      + standardKingMove(color; opponentColor)
        isNotAttackedBy(opponentColor; forwardDirection)
    )

#checkForPromotion(forwardDirection; color) =
    (
        {? forwardDirection}[color~Pawn]
      + {! forwardDirection}[majorPieces(color)]
    )

#standardPawnMove(forwardDirection; backDirection; color; opponentColor) =
    pickUpPiece(color~Pawn)
    (
        // promotion cannot occur
        {! backDirection^2}
        (forwardDirection{empty})^2
        [color~Pawn]
        [$ pawnDoubleMove=1]
      + (
            forwardDirection{empty}
          + (right forwardDirection+left forwardDirection){singleColorPieces(opponentColor)}
        )
        checkForPromotion(forwardDirection; color)
    )

#enPassantPawnMove(forwardDirection; color) =
    {$ pawnDoubleMove==1}
    (
        // we are sure that adjacent cell is occupied by opponentColor~Pawn, because pawnDoubleMove==1, so don't check it
        right pickUpPiece(color~Pawn)
        left
      + left pickUpPiece(color~Pawn)
        right
    )
    [empty]
    forwardDirection
    [$ pawnDoubleMove=0]
    [color~Pawn]

#allMoves(forwardDirection; backDirection; color; opponentColor) =
    (
        anySquare
        [$ pawnDoubleMove=0]
        (
            bishopMove(color; opponentColor)
          + rookMove(color; opponentColor)
          + knightMove(color; opponentColor)
          + queenMove(color; opponentColor)
          + kingMove(forwardDirection; color; opponentColor)
          + standardPawnMove(forwardDirection; backDirection; color; opponentColor)
        )
      + enPassantPawnMove(forwardDirection; color)
    ){! checked(color; opponentColor; forwardDirection)}
    (
        {? checked(opponentColor; color; backDirection)}[$ opponentColor=0,color=100]
      + {! checked(opponentColor; color; backDirection)}[$ color=50,opponentColor=50]
    )->>[$ turn=turn+1]->opponentColor

#rules = ->white
    (
        allMoves(up;down;white;black)
        allMoves(down;up;black;white)
    )*

