// notes:
// - 8x8
// - only the first capture (with man or king) is mandatory
// - only ending at the final row makes you a king
// - pieces are removed from board immediately
// - king can move forwards and backwards as many squares as he wants
// - king can move as far away as he wants from captured piece
// - man can capture backwards, but move only forwards
// - game is limited to 180 turns


#line(piece) =
    [piece, empty, piece, empty, piece, empty, piece, empty]
#offsetLine(piece) =
    [empty, piece, empty, piece, empty, piece, empty, piece]

#board =
    rectangle(up,down,left,right,
        line(blackMan)
        offsetLine(blackMan)
        line(blackMan)
        offsetLine(empty)
        line(empty)
        offsetLine(whiteMan)
        line(whiteMan)
        offsetLine(whiteMan)
    )


#singleColorPieces(color) = color~Man, color~King
#allPieces = singleColorPieces(white), singleColorPieces(black)


#players = black (10), white (10)
#pieces = allPieces, empty
#variables = turn (181)


#anySquare =
    (up+down+left+right)*

#pickUpPiece(piece) =
    {piece}[empty]

#placePiece(piece) =
    {empty}[piece]

#nonCapturingManMove(color; forwardDirection) =
    pickUpPiece(color~Man)
    (right forwardDirection+left forwardDirection)
    {empty}

#potentialJumpInGivenDirection(xDirection; yDirection; middleAction; opponentColor) =
    xDirection yDirection
    {singleColorPieces(opponentColor)}
    middleAction
    xDirection yDirection
    {empty}

#potentialJump(opponentColor; middleAction; forwardDirection) =
    (
        potentialJumpInGivenDirection(right;forwardDirection; middleAction; opponentColor)
      + potentialJumpInGivenDirection(left;forwardDirection; middleAction; opponentColor)
    )

#potentialJumpAround(opponentColor; middleAction) =
    (
        potentialJump(opponentColor; middleAction; up)
      + potentialJump(opponentColor; middleAction; down)
    )

#checkForPromotion(color; forwardDirection) =
    (
        {? forwardDirection}[color~Man]
      + {! forwardDirection}[color~King]
    )

#capturingManMove(color; opponentColor; forwardDirection) =
    pickUpPiece(color~Man)
    potentialJump(opponentColor; [empty]; forwardDirection)->>
    (potentialJump(opponentColor; [empty]; forwardDirection)->>)*
    {! potentialJump(opponentColor;;forwardDirection)}
    {empty}

#nonCapturingKingMove(color) =
    pickUpPiece(color~King)
    (
        up left
      + up right
      + down left
      + down right
    )
    placePiece(color~King)

#capturingKingMove(color; opponentColor) =
    pickUpPiece(color~King)
    potentialJumpAround(opponentColor; [empty])->>
    (potentialJumpAround(opponentColor; [empty])->>)*
    {! potentialJumpAround(opponentColor;)}
    placePiece(color~King)

#canCapture(color; opponentColor; forwardDirection) =
    anySquare
    (
        {color~King}potentialJumpAround(opponentColor;)
      + {color~Man}potentialJump(opponentColor;;forwardDirection)
    )

#allMoves(forwardDirection; color; opponentColor) =
    [$ opponentColor=1, color=0]
    (
        {! canCapture(color; opponentColor; forwardDirection)}
        (
            anySquare
            nonCapturingManMove(color; forwardDirection)
            checkForPromotion(color; forwardDirection)
          + anySquare
            nonCapturingKingMove(color)
        )
      + (
            anySquare
            capturingManMove(color; opponentColor;forwardDirection)
            checkForPromotion(color; forwardDirection)
          + anySquare
            capturingKingMove(color; opponentColor)
        )
    )[$ turn=turn+1]->opponentColor

#gameContinues =
    [$ white=0, black=0]
    {$ turn<=180}

#rules = ->black
    (
        gameContinues
        allMoves(down;black;white)
        gameContinues
        allMoves(up;white;black)
    )*

