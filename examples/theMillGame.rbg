// The Mill Game
// -- The play is limited to 50 turns.

#pieces = empty, whitePiece, blackPiece
#players = white(100), black(100)
#variables = turn(49)

#circleSegment(
    v;id1;id2;id3;previousOnCircle;
    parallelDirection1;parallelDirection2;
    insideDirection;outsideDirection;
    outsideCircleNeighbor;insideCircleNeighbor) =
        v~id1 [empty] {parallelDirection1: v~id2, insideDirection: v~previousOnCircle}
        v~id2 [empty] {parallelDirection1: v~id3, parallelDirection2: v~id1 insideCircleNeighbor outsideCircleNeighbor}

#circle(
    name;
    outsideLeft;outsideUp;outsideRight;outsideDown;
    insideLeft;insideUp;insideRight;insideDown) =
        circleSegment(name;1;2;3;8;up;down;right;left;outsideLeft;insideLeft)
        circleSegment(name;3;4;5;2;right;left;down;up;outsideUp;insideUp)
        circleSegment(name;5;6;7;4;down;up;left;right;outsideRight;insideRight)
        circleSegment(name;7;8;1;6;left;right;up;down;outsideDown;insideDown)

#board =
    circle(
        outer;
        ;;;;
        ,right: middle2;,down: middle4;,left: middle6;,up: middle8)
    circle(
        middle;
        ,left: outer2;,up: outer4;,right: outer6;,down: outer8;
        ,right: inner2;,down: inner4;,left: inner6;,up: inner8)
    circle(
        inner;
        ,left: middle2;,up: middle4;,right: middle6;,down: middle8;
        ;;;)


#anyNeighbor = (up+down+left+right)
#anySquare = anyNeighbor*

#threeInRow(piece;direction) =
    {piece}direction{piece}direction{piece}

#isPartOfDirectedMill(color;direction1;direction2) =
    (
        {? direction1 {color~Piece}} {? direction2 {color~Piece}}
      + threeInRow(color~Piece;direction1)
      + threeInRow(color~Piece;direction2)
    )

#isPartOfMill(color) =
    (
        isPartOfDirectedMill(color;up;down)
      + isPartOfDirectedMill(color;left;right)
    )

#placePiece(piece) = {empty}[piece]

#removePiece(piece) = {piece}[empty]

#findAndCaptureOpponent(color) =
    anySquare {color~Piece}
    (
        {! isPartOfMill(color)}
      + {! anySquare {color~Piece}{! isPartOfMill(color)}}
    )->>[empty]

#handlePiecePlacement(color;opponentColor) =
    placePiece(color~Piece)
    (
        {? isPartOfMill(color)}findAndCaptureOpponent(opponentColor)
      + {! isPartOfMill(color)}->>
    )
    [$ color=100, opponentColor=0]
    (
        [$ turn = turn + 1]
      + {$ turn == 49} (
            {$ opponentColor~Piece >= 3} [$ color=50, opponentColor=50]
          + {$ opponentColor~Piece < 3}
        ) ->> {}
    )

#firstPhaseTurn(color;opponentColor) =
    ->color
    anySquare
    handlePiecePlacement(color;opponentColor)

#pickupAnyPiece(color) =
    anySquare
    removePiece(color~Piece)

#secondPhaseTurn(color;opponentColor) =
    (
        {$ color~Piece > 3}->color
        pickupAnyPiece(color)
        anyNeighbor
      + {$ color~Piece == 3}->color
        pickupAnyPiece(color)
        anySquare
    )
    handlePiecePlacement(color;opponentColor)

#rules =
    (
        firstPhaseTurn(white;black)
        firstPhaseTurn(black;white)
    )^9
    (
        secondPhaseTurn(white;black)
        secondPhaseTurn(black;white)
    )*
