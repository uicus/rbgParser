// Pentago
// -- Each original move is split into two moves: placement and rotation.

#players = white(999), black(100)
#pieces = e, w, b
#variables = tmp(2)
#board = rectangle(up,down,left,right,
         [e,e,e,e,e,e]
         [e,e,e,e,e,e]
         [e,e,e,e,e,e]
         [e,e,e,e,e,e]
         [e,e,e,e,e,e]
         [e,e,e,e,e,e])

#anySquare = ((up* + down*)(left* + right*))

#winAt(piece; shift1; shift2) = ((shift1 {piece})* (shift2 {piece})^4)
#winAt(piece) = (
        winAt(piece; up left; down right)
      + winAt(piece; up; down)
      + winAt(piece; up right; down left)
      + winAt(piece; left; right)
    )
#winCheckAt(me; opp; piece) = (
        {! winAt(piece)}
      + {? winAt(piece)} ->> [$ me=100] [$ opp=0] ->> {}
    )

#winAtSingle(piece; shift2) = ((shift2 {piece})^4)
#winGlobal(piece) = (anySquare {piece} (
        winAtSingle(piece; down right)
      + winAtSingle(piece; down)
      + winAtSingle(piece; down left)
      + winAtSingle(piece; right)
    ))
#winCheckGlobal = (
       {! winGlobal(w)} (
           {! winGlobal(b)}
         + {? winGlobal(b)} [$ white=0] [$ black=100] ->> {}
       )
     + {? winGlobal(w)} (
           {! winGlobal(b)} [$ white=100] [$ black=0] ->> {}
         + {? winGlobal(b)} [$ white=50] [$ black=50] ->> {}
       )
    )

#onAMiddleSquare = (left up {! left} {! up} + right up {! right} {! up} + right down {! right} {! down} + left down {! left} {! down})

#store = ({e} [$ tmp = 0] + {w} [$ tmp = 1] + {b} [$ tmp = 2])
#putAndStore =  ({$ tmp == 0} store [e] + {$ tmp == 1} store [w] + {$ tmp == 2} store [b])
#put = ({$ tmp == 0} [e] + {$ tmp == 1} [w] + {$ tmp == 2} [b])

#rotateClockwise = (
      up store right down putAndStore down left putAndStore left up putAndStore up right put
      right store down down putAndStore left left putAndStore up up putAndStore right right put
    )
#rotateCounterclockwise = (
      up store left down putAndStore down right putAndStore right up putAndStore up left put
      left store down down putAndStore right right putAndStore up up putAndStore left left put
    )

#turn(me; opp; piece) = (
      ->me anySquare {e}
      [piece] winCheckAt(me; opp; piece)
      anySquare {? onAMiddleSquare}
      (->> rotateClockwise + ->> rotateCounterclockwise)
      winCheckGlobal
    )

#rules = [$ white=50] [$ black=50] (
      turn(white; black; w)
      turn(black; white; b)
    )*
