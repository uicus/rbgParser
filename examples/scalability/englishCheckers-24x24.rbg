// English checkers
// -- game ends after 20 moves without capturing or moving a man

#players = black(100), white(100)
#pieces = empty, whiteMan, whiteKing, blackMan, blackKing
#variables = stagnation(20)

#line(piece1; piece2) = [piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2, piece1, piece2]
#line(piece) = line(piece;empty)
#offsetLine(piece) = line(empty;piece)
#board = rectangle(up,down,left,right,
         offsetLine(blackMan)
         line(blackMan)
         offsetLine(blackMan)
         line(blackMan)
         offsetLine(blackMan)
         line(blackMan)
         offsetLine(blackMan)
         line(blackMan)
         offsetLine(blackMan)
         line(empty)
         offsetLine(empty)
         line(empty)
         offsetLine(empty)
         line(empty)
         offsetLine(empty)
         line(whiteMan)
         offsetLine(whiteMan)
         line(whiteMan)
         offsetLine(whiteMan)
         line(whiteMan)
         offsetLine(whiteMan)
         line(whiteMan)
         offsetLine(whiteMan)
         line(whiteMan))

#anySquare = ((up* + down*)(left* + right*))

#grabPiece(piece) = {piece}[empty]
#dropPiece(piece) = {empty}[piece]
#dropMan(me; forward; backward) = {empty} (forward backward [me~Man] + backward^7 forward^7 [me~King])

#potentialJumpInGivenDirection(xDir; yDir; middleAction; opp) =
    xDir yDir
    {opp~Man,opp~King}
    middleAction
    xDir yDir
    {empty}

#potentialJumpForward(opp; middleAction; forward) =
    (
        potentialJumpInGivenDirection(left; forward; middleAction; opp)
      + potentialJumpInGivenDirection(right; forward; middleAction; opp)
    )

#potentialJumpAround(opp; middleAction) =
    (
        potentialJumpForward(opp; middleAction; up)
      + potentialJumpForward(opp; middleAction; down)
    )

#canCapture(me; opp; forward) =
    anySquare
    (
        {me~King} potentialJumpAround(opp; )
      + {me~Man} potentialJumpForward(opp; ; forward)
    )

#nonCapturingManMove(me; forward; backward) =
    grabPiece(me~Man)
    (right + left) forward
    dropMan(me; forward; backward)

#capturingManMove(me; opp; forward; backward) =
    grabPiece(me~Man)
    potentialJumpForward(opp; [empty]; forward)
    (potentialJumpForward(opp; [empty]; forward))*
    {! potentialJumpForward(opp; ; forward)}
    dropMan(me; forward; backward)

#nonCapturingKingMove(me) =
    grabPiece(me~King)
    (up + down) (left + right)
    dropPiece(me~King)

#capturingKingMove(me; opp) =
    grabPiece(me~King)
    potentialJumpAround(opp; [empty])
    (potentialJumpAround(opp; [empty]))*
    {! potentialJumpAround(opp;)}
    dropPiece(me~King)

#move(me; opp; forward; backward) =
    (
        {! canCapture(me; opp; forward)}
        anySquare
        (
            nonCapturingManMove(me; forward; backward) [$ stagnation = 0]
          + nonCapturingKingMove(me)
        )
      + anySquare
        (
            capturingManMove(me; opp; forward; backward)
          + capturingKingMove(me; opp)
        ) [$ stagnation = 0]
    )
    ->>
    [$ me=50] [$ opp=50]
    ->>
    [$ stagnation = stagnation+1] [$ me=100] [$ opp=0]
    ->opp

#rules = ->black (
      move(black; white; down; up)
      move(white; black; up; down)
    )*
