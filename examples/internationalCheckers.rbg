// International checkers
// -- game ends in a draw after 20 moves without capturing or moving a man

#players = white(100), black(100)
#pieces =
    empty, whiteMan, whiteKing, blackMan, blackKing,
    toBeRemoved, manToBeRemoved, kingToBeRemoved, toBeRemovedDuringCheck, manToBePlaced, kingToBePlaced, manToBeMoved, kingToBeMoved
#variables = stagnation(20), actuallyCapturedPieces(12)

#offsetLine(piece) = [empty, piece, empty, piece, empty, piece, empty, piece, empty, piece]
#line(piece) = [piece, empty, piece, empty, piece, empty, piece, empty, piece, empty]
#board = rectangle(up,down,left,right,
    offsetLine(blackMan)
    line(blackMan)
    offsetLine(blackMan)
    line(blackMan)
    offsetLine(empty)
    line(empty)
    offsetLine(whiteMan)
    line(whiteMan)
    offsetLine(whiteMan)
    line(whiteMan))

#anySquare = ((up* + down*)(left* + right*))
#grabPiece(piece) = {piece}[empty]
#dropMan(me; forwardDirection) =
    {manToBePlaced, manToBeMoved} ({? forwardDirection}[me~Man] + {! forwardDirection}[me~King])

#jumpWhileRealMove(direction; opp) =
    direction
    {opp~Man, opp~King}
    [toBeRemoved]
    direction
    {empty, manToBeRemoved, kingToBeRemoved}

#jumpWhileChecking(direction; opp) =
    direction
    {opp~Man, opp~King, toBeRemoved}
    [toBeRemovedDuringCheck]
    direction
    {empty, manToBePlaced, kingToBePlaced}

#jumpWhileCleaning(direction) =
    direction
    {toBeRemoved}
    [empty]
    direction

#manJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(up left;opp)
      + jumpWhileRealMove(up right;opp)
      + jumpWhileRealMove(down left;opp)
      + jumpWhileRealMove(down right;opp)
    )

#manJumpWhileChecking(opp) =
    (
        jumpWhileChecking(up left;opp)
      + jumpWhileChecking(up right;opp)
      + jumpWhileChecking(down left;opp)
      + jumpWhileChecking(down right;opp)
    )

#realManCapturingMove(me; opp) =
    {me~Man}[manToBeRemoved]
    manJumpWhileRealMove(opp)
    (manJumpWhileRealMove(opp))*

#checkingManCapturingMove(me; opp) =
    grabPiece(me~Man, manToBeRemoved, manToBeMoved)
    manJumpWhileChecking(opp)
    (manJumpWhileChecking(opp))*

#kingJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(up left({empty, manToBeRemoved, kingToBeRemoved}up left)*;opp)
      + jumpWhileRealMove(up right({empty, manToBeRemoved, kingToBeRemoved}up right)*;opp)
      + jumpWhileRealMove(down left({empty, manToBeRemoved, kingToBeRemoved}down left)*;opp)
      + jumpWhileRealMove(down right({empty, manToBeRemoved, kingToBeRemoved}down right)*;opp)
    )

#kingJumpWhileChecking(opp) =
    (
        jumpWhileChecking(up left({empty, manToBePlaced, kingToBePlaced}up left)*;opp)
      + jumpWhileChecking(up right({empty, manToBePlaced, kingToBePlaced}up right)*;opp)
      + jumpWhileChecking(down left({empty, manToBePlaced, kingToBePlaced}down left)*;opp)
      + jumpWhileChecking(down right({empty, manToBePlaced, kingToBePlaced}down right)*;opp)
    )

#realKingCapturingMove(me; opp) =
    {me~King}[kingToBeRemoved]
    kingJumpWhileRealMove(opp)
    (kingJumpWhileRealMove(opp))*

#checkingKingCapturingMove(me; opp) =
    grabPiece(me~King, kingToBeRemoved, kingToBeMoved)
    kingJumpWhileChecking(opp)
    (kingJumpWhileChecking(opp))*

#noncapturingManMove(me; forwardDirection) =
    {me~Man}[manToBeRemoved]
    forwardDirection (left + right)
    {empty}

#noncapturingKingMove(me) =
    {me~King}[kingToBeRemoved]
    (
        up left({empty}up left)*
      + up right({empty}up right)*
      + down left({empty}down left)*
      + down right({empty}down right)*
    )
    {empty}

#realKingMove(me; opp) =
    (
        realKingCapturingMove(me; opp)
      + noncapturingKingMove(me)
    )
    (
        {empty}[kingToBePlaced]
      + {kingToBeRemoved}[kingToBeMoved]
    )

#realManMove(me; opp; forwardDirection) =
    (
        realManCapturingMove(me; opp)
      + noncapturingManMove(me; forwardDirection)
    )
    (
        {empty}[manToBePlaced]
      + {manToBeRemoved}[manToBeMoved]
    )

#realMove(me; opp; forwardDirection) =
    anySquare
    (
        realKingMove(me; opp)
      + realManMove(me; opp; forwardDirection)[$ stagnation = 0]
    )

#checkingMove(me; opp; forwardDirection) =
    anySquare
    (
        checkingKingCapturingMove(me; opp)
      + checkingManCapturingMove(me; opp)
    )

#cleaningJumpSequence(me) =
    (
        jumpWhileCleaning(up left(up left)*)
      + jumpWhileCleaning(up right(up right)*)
      + jumpWhileCleaning(down left(down left)*)
      + jumpWhileCleaning(down right(down right)*)
    )

#cleaningNeighborMove(me) =
    (
        (up left)*
      + (up right)*
      + (down left)*
      + (down right)*
    )

#cleaningMove(me; forwardDirection) =
    (
        dropMan(me; forwardDirection)
      + {kingToBePlaced, kingToBeMoved}[me~King]
    )
    (
        cleaningJumpSequence(me)*
      + cleaningNeighborMove(me)
    )
    (
        grabPiece(manToBeRemoved, kingToBeRemoved)
      + {me~King, me~Man}
    )

#move(me; opp; forwardDirection) =
    realMove(me; opp; forwardDirection)
    {!
        [$ actuallyCapturedPieces = toBeRemoved]
        checkingMove(me; opp; forwardDirection)
        {$ toBeRemovedDuringCheck > actuallyCapturedPieces}
    }->>
    cleaningMove(me; forwardDirection)
    {$ toBeRemoved + manToBeRemoved + kingToBeRemoved + manToBePlaced + kingToBePlaced + manToBeMoved + kingToBeMoved == 0}
    [$ me=50] [$ opp=50] ->>
    [$ stagnation = stagnation+1][$ me=100] [$ opp=0] ->opp

#rules = ->white (
      move(white; black; up)
      move(black; white; down)
    )*
