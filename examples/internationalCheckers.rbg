// International checkers
// -- game ends after 20 moves without capturing or moving a man

#players = black(100), white(100)
#pieces =
    empty, whiteMan, whiteKing, blackMan, blackKing,
    toBeRemoved, manToBeRemoved, kingToBeRemoved, toBeRemovedDuringCheck, manToBePlaced, kingToBePlaced
#variables = stagnation(20), actuallyCapturedPieces(12)

#line(piece) = [piece, empty, piece, empty, piece, empty, piece, empty]
#offsetLine(piece) = [empty, piece, empty, piece, empty, piece, empty, piece]
#board = rectangle(up,down,left,right,
    offsetLine(blackMan)
    line(blackMan)
    offsetLine(blackMan)
    line(empty)
    offsetLine(empty)
    line(whiteMan)
    offsetLine(whiteMan)
    line(whiteMan))

#anySquare = ((up* + down*)(left* + right*))
#grabPiece(piece) = {piece}[empty]
#dropMan(forwardDirection) =
    {empty} ({? forwardDirection}[manToBePlaced] + {! forwardDirection}[kingToBePlaced])

#jumpWhileRealMove(direction; opp) =
    direction
    {opp~Man, opp~King}
    [toBeRemoved]
    direction
    {empty}

#jumpWhileChecking(direction; opp) =
    direction
    {opp~Man, opp~King, toBeRemoved}
    [toBeRemovedDuringCheck]
    direction
    {empty, manToBePlaced, kingToBePlaced}

#jumpWhileCleaning(direction) =
    direction
    {toBeRemoved}
    [empty]
    direction

#manJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(up left;opp)
      + jumpWhileRealMove(up right;opp)
      + jumpWhileRealMove(down left;opp)
      + jumpWhileRealMove(down right;opp)
    )

#manJumpWhileChecking(opp) =
    (
        jumpWhileChecking(up left;opp)
      + jumpWhileChecking(up right;opp)
      + jumpWhileChecking(down left;opp)
      + jumpWhileChecking(down right;opp)
    )

#realManCapturingMove(me; opp) =
    {me~Man}[manToBeRemoved]
    manJumpWhileRealMove(opp)
    (manJumpWhileRealMove(opp))*

#checkingManCapturingMove(me; opp) =
    grabPiece(me~Man, manToBeRemoved)
    manJumpWhileChecking(opp)
    (manJumpWhileChecking(opp))*

#kingJumpWhileRealMove(opp) =
    (
        jumpWhileRealMove(up left(up left)*;opp)
      + jumpWhileRealMove(up right(up right)*;opp)
      + jumpWhileRealMove(down left(down left)*;opp)
      + jumpWhileRealMove(down right(down right)*;opp)
    )

#kingJumpWhileChecking(opp) =
    (
        jumpWhileChecking(up left(up left)*;opp)
      + jumpWhileChecking(up right(up right)*;opp)
      + jumpWhileChecking(down left(down left)*;opp)
      + jumpWhileChecking(down right(down right)*;opp)
    )

#realKingCapturingMove(me; opp) =
    {me~King}[kingToBeRemoved]
    kingJumpWhileRealMove(opp)
    (kingJumpWhileRealMove(opp))*

#checkingKingCapturingMove(me; opp) =
    grabPiece(me~King, kingToBeRemoved)
    kingJumpWhileChecking(opp)
    (kingJumpWhileChecking(opp))*

#noncapturingManMove(me; forwardDirection) =
    {me~Man}[manToBeRemoved]
    forwardDirection (left + right)
    {empty}

#noncapturingKingMove(me) =
    {me~King}[kingToBeRemoved]
    (
        (up left)*
      + (up right)*
      + (down left)*
      + (down right)*
    )
    {empty}

#realKingMove(me; opp) =
    (
        realKingCapturingMove(me; opp)
      + noncapturingKingMove(me)
    )[kingToBePlaced]

#realManMove(me; opp; forwardDirection) =
    (
        realManCapturingMove(me; opp)
      + noncapturingManMove(me; forwardDirection)
    )
    dropMan(forwardDirection)

#realMove(me; opp; forwardDirection) =
    anySquare
    (
        realKingMove(me; opp)
      + realManMove(me; opp; forwardDirection)[$ stagnation = 0]
    )

#checkingMove(me; opp; forwardDirection) =
    anySquare
    (
        checkingKingCapturingMove(me; opp)
      + checkingManCapturingMove(me; opp)
    )

#cleaningJumpSequence(me) =
    (
        jumpWhileCleaning(up left(up left)*)
      + jumpWhileCleaning(up right(up right)*)
      + jumpWhileCleaning(down left(down left)*)
      + jumpWhileCleaning(down right(down right)*)
    )

#cleaningNeighborMove(me) =
    (
        (up left)*
      + (up right)*
      + (down left)*
      + (down right)*
    )

#cleaningMove(me) =
    (
        {manToBePlaced}[me~Man]
      + {kingToBePlaced}[me~King]
    )
    (
        cleaningJumpSequence(me)*
      + cleaningNeighborMove(me)
    )
    grabPiece(manToBeRemoved, kingToBeRemoved)

#move(me; opp; forwardDirection) =
    realMove(me; opp; forwardDirection)
    {!
        [$ actuallyCapturedPieces = toBeRemoved]
        checkingMove(me; opp; forwardDirection)
        {$ toBeRemovedDuringCheck > actuallyCapturedPieces}
    }->>
    cleaningMove(me)
    {$ toBeRemoved + manToBeRemoved + kingToBeRemoved + manToBePlaced + kingToBePlaced == 0}
    [$ me=50] [$ opp=50] ->>
    [$ stagnation = stagnation+1][$ me=100] [$ opp=0] ->opp

#rules = ->black (
      move(black; white; down)
      move(white; black; up)
    )*
